{"version":3,"sources":["components/MainContent/SongControls.js","components/MainContent/SongInfo.js","components/MainContent.js","components/LibrarySong.js","components/Library.js","components/Nav.js","Add.js","Main.js","App.js","index.js"],"names":["SongControls","_ref","currSong","setCurrSong","allSongs","setAllSongs","isplaying","setIsplaying","audioRef","time","setTime","getTime","Math","floor","slice","skipHandler","async","currentIndex","findIndex","song","_id","direction","length","current","play","useEffect","activeSong","map","songs","_objectSpread","active","sliderAnim","width","concat","animation","background","color","_jsx","children","_jsxs","className","min","max","duration","value","onChange","e","currentTime","target","type","style","FontAwesomeIcon","onClick","size","icon","faAngleLeft","playPauseHandler","pause","faPause","faPlay","faAngleRight","SongInfo","src","cover","alt","name","artist","MainContent","libraryUpdater","setLibraryUpdater","addSongsPane","setAddSongsPane","bgGradStyle","mainContentHandler","LibrarySong","filterStatus","selectSong","Library","setFilterStatus","Nav","addSongHandler","UilCloudUpload","libraryHandler","UilMusic","Add","setName","useState","setCover","setArtist","audio","setAudio","color1","setColor1","color2","setColor2","lang","setLang","pass","setPass","required","id","preventDefault","data","axios","post","alert","Main","fetchedSongs","unfilteredSongs","timeUpdateHandler","useRef","filterHandler","filter","_Fragment","ref","onTimeUpdate","onLoadedMetadata","onEnded","App","setFetchedSongs","fetchSongsFromAPI","fetch","get","error","console","log","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5fd199a.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport {faPlay,faPause , faAngleLeft, faAngleRight} from '@fortawesome/free-solid-svg-icons'\r\nconst SongControls = ({currSong, setCurrSong, allSongs, setAllSongs, isplaying, setIsplaying, audioRef, time, setTime}) => {\r\n    const playPauseHandler = () => {\r\n        if(isplaying){\r\n            audioRef.current.pause()\r\n            setIsplaying(!isplaying)\r\n        }else{\r\n            audioRef.current.play()\r\n            setIsplaying(!isplaying)\r\n        }\r\n    }\r\n    const getTime =(time)=>{\r\n        return(\r\n            Math.floor(time/60) + \":\" + (\"0\" + Math.floor(time%60)).slice(-2)\r\n        )\r\n    }\r\n    const dragHandler = (e) => {\r\n        audioRef.current.currentTime = e.target.value;\r\n        setTime({...time, current: e.target.value})\r\n    }\r\n    const skipHandler = async (direction) => {\r\n        const currentIndex = allSongs.findIndex((song) => song._id === currSong._id)\r\n        if(direction==='next'){\r\n            await setCurrSong(allSongs[(currentIndex + 1) % allSongs.length]);\r\n        }\r\n        if(direction==='prev'){\r\n            if((currentIndex - 1)=== -1)\r\n                await setCurrSong(allSongs[allSongs.length - 1]);\r\n            else\r\n                await setCurrSong(allSongs[(currentIndex - 1) % allSongs.length]);\r\n        }\r\n        if(isplaying) audioRef.current.play()\r\n    }\r\n    useEffect(()=>{\r\n        const activeSong = allSongs.map((songs) =>{\r\n            if(songs._id===currSong._id){\r\n                return{\r\n                    ...songs, active: true\r\n                }\r\n            }else{\r\n                return{\r\n                    ...songs, active: false\r\n                }\r\n            }\r\n        });\r\n        setAllSongs(activeSong)\r\n    }, [currSong]);\r\n    const sliderAnim ={\r\n        width: `${time.animation}%`,\r\n        background: `linear-gradient(to right, ${currSong.color[0]}, ${currSong.color[1]})`\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"CurrentSongControls\">\r\n                <div className=\"TimeStamp\">\r\n                    <p>{getTime(time.current)}</p>\r\n                    <div className=\"track\">\r\n                        <input min={0} max={time.duration || 0} value={time.current} onChange={dragHandler} type=\"range\"/>\r\n                        {/* <div className=\"trackAnim\"></div> */}\r\n                        <div style={sliderAnim} className=\"trackAnim\"></div>\r\n                    </div>\r\n                    <p>{time.duration ? getTime(time.duration) : '0:00'}</p>\r\n                </div>\r\n                <div className=\"MediaControls\">\r\n                    <FontAwesomeIcon onClick={()=> skipHandler('prev')} className=\"prev\" size=\"2x\" icon={faAngleLeft} />\r\n                    <FontAwesomeIcon onClick={playPauseHandler} className=\"play\" size=\"2x\" icon={isplaying ? faPause : faPlay} />\r\n                    <FontAwesomeIcon onClick={()=> skipHandler('next')} className=\"next\" size=\"2x\" icon={faAngleRight} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongControls\r\n","import React, {useState,} from 'react'\r\nconst SongInfo = ({currSong}) => {\r\n    return (\r\n        <div>\r\n            <div className=\"CurrentSongPlayingInfo\">\r\n                <img src={currSong.cover} alt=\"\"/>\r\n                <h2>{currSong.name}</h2>\r\n                <h3>{currSong.artist}</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongInfo\r\n","import React from 'react'\r\nimport SongControls from './MainContent/SongControls'\r\nimport SongInfo from \"./MainContent/SongInfo\"\r\nconst MainContent = ({allSongs, setAllSongs, currSong, setCurrSong, isplaying, setIsplaying, audioRef, time, setTime, libraryUpdater, setLibraryUpdater, addSongsPane, setAddSongsPane}) => {\r\n    const mainContentHandler = () => {\r\n        if(libraryUpdater) setLibraryUpdater(!libraryUpdater)\r\n        if(addSongsPane) setAddSongsPane(!addSongsPane)\r\n    }\r\n    const bgGradStyle ={\r\n        background: `linear-gradient(to bottom, #fff, ${currSong.color[1]})`\r\n    }\r\n    \r\n    return (\r\n        <div className=\"AppContainer\" >\r\n            <div onClick={mainContentHandler} className={`App ${libraryUpdater ? 'maincomponent' : ''}`}>\r\n                <SongInfo currSong={currSong}/>\r\n                <SongControls \r\n                    currSong={currSong} \r\n                    isplaying={isplaying} \r\n                    setIsplaying={setIsplaying}\r\n                    audioRef={audioRef}\r\n                    time={time}\r\n                    setTime={setTime}\r\n                    allSongs={allSongs}\r\n                    setAllSongs={setAllSongs}\r\n                    setCurrSong={setCurrSong}\r\n                />\r\n            </div>\r\n            <div style={bgGradStyle} className=\"bgGrad\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainContent","import React, {useEffect} from 'react'\r\nconst LibrarySong = ({song, setAllSongs, setCurrSong, allSongs, audioRef, isplaying, setIsplaying, filterStatus}) => {\r\n    const changeFromLibraryHandler = async () =>{\r\n        const selectSong = song;\r\n        await setCurrSong(selectSong);\r\n        const activeSong = allSongs.map((songs) =>{\r\n            if(songs._id===song._id){\r\n                return{\r\n                    ...songs, active: true\r\n                }\r\n            }else{\r\n                return{\r\n                    ...songs, active: false\r\n                }\r\n            }\r\n        });\r\n        setAllSongs(activeSong)\r\n        if(isplaying) audioRef.current.play();\r\n        else{\r\n            setIsplaying(!isplaying);\r\n            audioRef.current.play();\r\n        }\r\n    }\r\n    return (\r\n        <div onClick={changeFromLibraryHandler} className={`librarySong ${song.active ? 'selectedLibrary' : ''}`}>\r\n            <img src={song.cover} alt=\"\"/>\r\n            <div className=\"songdesc\">\r\n                <h3>{song.name}</h3>\r\n                <h4>{song.artist}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LibrarySong\r\n","import React from 'react'\r\nimport LibrarySong from './LibrarySong'\r\nconst Library = ({allSongs, setAllSongs, setCurrSong, audioRef, isplaying, setIsplaying, libraryUpdater, setFilterStatus, filterStatus}) => {\r\n    const statusHandler = (e) => {\r\n        setFilterStatus(e.target.value)\r\n    }\r\n    return (\r\n        <div className={`library ${libraryUpdater ? 'activelibrary' : ''}`}>\r\n            <h2>Library</h2>\r\n            <div className=\"select\">\r\n                <select onChange={statusHandler} name=\"songSelection\" className=\"selectionClass\">\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"en\">English</option>\r\n                    <option value=\"jp\">Japanese</option>\r\n                </select>\r\n            </div>\r\n            <div className=\"individualLibraryComponent\">\r\n                {allSongs.map((song) =>(\r\n                    <LibrarySong song={song} setCurrSong={setCurrSong} key={song._id} allSongs={allSongs} audioRef={audioRef} \r\n                    isplaying={isplaying}\r\n                    setIsplaying={setIsplaying}\r\n                    setAllSongs={setAllSongs}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Library\r\n","import React from 'react'\r\nimport { UilCloudUpload, UilMusic } from '@iconscout/react-unicons'\r\n\r\nconst Nav = ({libraryUpdater,setLibraryUpdater, addSongsPane, setAddSongsPane}) => {\r\n    const libraryHandler = () => {\r\n        setLibraryUpdater(!libraryUpdater)\r\n    }\r\n    const addSongHandler = () => {\r\n        setAddSongsPane(!addSongsPane)\r\n    }\r\n    return (\r\n        <nav>\r\n            <h1>iMusic</h1>\r\n            <div className=\"btn\">\r\n                <button onClick={addSongHandler}>\r\n                    <UilCloudUpload />\r\n                </button>\r\n                <button onClick={libraryHandler}>\r\n                    <UilMusic />\r\n                </button>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React, {useState} from 'react'\r\nimport axios from 'axios'\r\n\r\nconst Add = ({addSongsPane}) => {\r\n    const [name, setName] = useState('')\r\n    const [cover, setCover] = useState('')\r\n    const [artist, setArtist] = useState('')\r\n    const [audio, setAudio] = useState('')\r\n    const [color1, setColor1] = useState('')\r\n    const [color2, setColor2] = useState('')\r\n    const [lang, setLang] = useState('en')\r\n    const [pass, setPass] = useState('')\r\n\r\n    const onNameChange = (e) =>{\r\n        setName(e.target.value)\r\n    }\r\n\r\n    const onCoverChange = (e) =>{\r\n        setCover(e.target.value)\r\n    }\r\n\r\n    const onArtistChange = (e) =>{\r\n        setArtist(e.target.value)\r\n    }\r\n\r\n    const onAudioChange = (e) =>{\r\n        setAudio(e.target.value)\r\n    }\r\n\r\n    const onColor1Change = (e) =>{\r\n        setColor1(e.target.value)\r\n    }\r\n\r\n    const onColor2Change = (e) =>{\r\n        setColor2(e.target.value)\r\n    }\r\n\r\n    const onLangChange = (e) =>{\r\n        setLang(e.target.value)\r\n    }\r\n\r\n    const onPassChange = (e) =>{\r\n        setPass(e.target.value)\r\n    }\r\n\r\n    const submitSong = async (e) =>{\r\n        e.preventDefault()\r\n        const color = [color1, color2]\r\n        const data = {\r\n            name, cover, artist, audio, color, lang\r\n        }\r\n        if(pass===\"Qwerty@21\"){\r\n            await axios.post('https://imusic-rest-api.herokuapp.com/', data)\r\n            alert(\"Song Added to DB\")\r\n            setName('')\r\n            setCover('')\r\n            setArtist('')\r\n            setAudio('')\r\n            setColor1('')\r\n            setColor2('')\r\n            setPass('')\r\n        }\r\n        else{\r\n            alert(\"You are not authenticated to add Songs.\")\r\n            setName('')\r\n            setCover('')\r\n            setArtist('')\r\n            setAudio('')\r\n            setColor1('')\r\n            setColor2('')\r\n            setPass('')\r\n        }\r\n    }\r\n    return (\r\n        <div className={`container ${addSongsPane? 'containerShow':''}`} >\r\n            <h2>Add Songs</h2>\r\n            <form>\r\n                <div className=\"inputBox\">\r\n                    <input type=\"text\" name=\"pass\" required=\"required\" onChange={onPassChange} value={pass} />\r\n                    <label>Password</label>\r\n                </div>\r\n                <div className=\"inputBox\">\r\n                    <input type=\"text\" name=\"name\" required=\"required\" onChange={onNameChange} value={name}/>\r\n                    <label>Song Name</label>\r\n                </div>\r\n                <div className=\"inputBox\">\r\n                    <input type=\"text\" name=\"cover\" required=\"required\" onChange={onCoverChange} value={cover}/>\r\n                    <label>Cover Image</label>\r\n                </div>\r\n                <div className=\"inputBox\">\r\n                    <input type=\"text\" name=\"artist\" required=\"required\" onChange={onArtistChange} value={artist} />\r\n                    <label>Artist Name</label>\r\n                </div>\r\n                <div className=\"inputBox\">\r\n                    <input type=\"text\" name=\"audio\" required=\"required\" onChange={onAudioChange} value={audio} />\r\n                    <label>Audio Link</label>\r\n                </div>\r\n                <div className=\"inputBox\">\r\n                    <input type=\"text\" name=\"color1\" required=\"required\" onChange={onColor1Change} value={color1} />\r\n                    <label>Primary Color</label>\r\n                </div>\r\n                <div className=\"inputBox\">\r\n                    <input type=\"text\" name=\"color2\" required=\"required\" onChange={onColor2Change} value={color2} />\r\n                    <label>Secondary Color</label>\r\n                </div>\r\n                <div className=\"selBox\">\r\n                    <label>Select language: </label>\r\n                    <select name=\"lang\" id=\"currsem\" className=\"select\" onChange={onLangChange} >\r\n                        <option value=\"en\">English</option>\r\n                        <option value=\"jp\">Japanese</option>\r\n                    </select>\r\n                </div>\r\n                <input type=\"submit\" value=\"Push to DB\" onClick={submitSong}/>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Add\r\n","import React, {useState, useRef, useEffect} from 'react'\r\nimport \"./styles/app.css\"\r\nimport MainContent from \"./components/MainContent\"\r\nimport Library from './components/Library'\r\nimport Nav from './components/Nav'\r\nimport Add from './Add'\r\n\r\nconst Main = ({fetchedSongs}) => {\r\n    const unfilteredSongs = fetchedSongs;\r\n    const [allSongs, setAllSongs] = useState(unfilteredSongs);\r\n    const [filterStatus, setFilterStatus] = useState('all')\r\n    const [currSong, setCurrSong] = useState(allSongs[0]);\r\n    const [isplaying, setIsplaying] = useState(false);\r\n    const [time, setTime] = useState({\r\n        current: 0,\r\n        duration: 0,\r\n        animation: 0,\r\n    });\r\n    const [libraryUpdater, setLibraryUpdater] = useState(false)\r\n    const [addSongsPane, setAddSongsPane] = useState(false)\r\n    const timeUpdateHandler = (e) =>{\r\n        const current = e.target.currentTime;\r\n        const duration = e.target.duration;\r\n        const animation = (current/duration)*100\r\n        setTime({\r\n            ...time, current, duration, animation\r\n        })\r\n    };\r\n    const audioRef = useRef(null);\r\n    const onSongEndHandler = async () => {\r\n        const currentIndex = allSongs.findIndex((song) => song._id === currSong._id)\r\n        await setCurrSong(allSongs[(currentIndex + 1) % allSongs.length]);\r\n        if(isplaying) audioRef.current.play()\r\n    }\r\n    const filterHandler = () => {\r\n        switch(filterStatus){\r\n            case 'jp':\r\n                setAllSongs(unfilteredSongs.filter(e => e.lang === 'jp'))\r\n                break;\r\n            case 'en':\r\n                setAllSongs(unfilteredSongs.filter(e => e.lang === 'en'))\r\n                break;\r\n            default:\r\n                setAllSongs(unfilteredSongs)\r\n                break;\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        filterHandler()\r\n    }, [filterStatus])\r\n    return (\r\n        <>\r\n            <Nav\r\n            libraryUpdater={libraryUpdater}\r\n            setLibraryUpdater={setLibraryUpdater}\r\n            addSongsPane={addSongsPane}\r\n            setAddSongsPane={setAddSongsPane}\r\n            />\r\n            <MainContent \r\n                allSongs={allSongs}\r\n                setAllSongs={setAllSongs}\r\n                currSong={currSong}\r\n                setCurrSong={setCurrSong}\r\n                isplaying={isplaying}\r\n                setIsplaying={setIsplaying}\r\n                audioRef={audioRef}\r\n                time={time}\r\n                setTime={setTime}\r\n                libraryUpdater={libraryUpdater}\r\n                setLibraryUpdater={setLibraryUpdater}\r\n                addSongsPane={addSongsPane}\r\n                setAddSongsPane={setAddSongsPane}\r\n             />\r\n             <Library \r\n                allSongs={allSongs}\r\n                setCurrSong={setCurrSong}\r\n                audioRef={audioRef}\r\n                isplaying={isplaying}\r\n                setIsplaying={setIsplaying}\r\n                setAllSongs={setAllSongs}\r\n                libraryUpdater={libraryUpdater}\r\n                setFilterStatus={setFilterStatus}\r\n            />\r\n            <audio \r\n                ref={audioRef}\r\n                src={currSong.audio}\r\n                onTimeUpdate={timeUpdateHandler}\r\n                onLoadedMetadata={timeUpdateHandler}\r\n                onEnded={onSongEndHandler}>\r\n            </audio>\r\n            <Add\r\n                addSongsPane={addSongsPane}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport Main from './Main'\r\nconst App = () => {\r\n    const [fetchedSongs, setFetchedSongs] = useState()\r\n    useEffect(()=>{\r\n        fetchSongsFromAPI()\r\n    },[])\r\n    const fetchSongsFromAPI = async () =>{\r\n        try {\r\n            const fetch = await axios.get(\"https://imusic-rest-api-production.up.railway.app/\")\r\n            setFetchedSongs(fetch.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n        {\r\n            fetchedSongs &&(\r\n\r\n                <Main fetchedSongs={fetchedSongs}/>\r\n            )\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n     <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}